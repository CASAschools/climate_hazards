This quarto doc will walk through the process of mapping flooding for each school area.

```{r}
library(tidyverse)
library(sf)
library(terra)
library(ggplot2)
library(tmap)
library(RColorBrewer)
library(leaflet)
```


```{r}
# read in FEMA data for entire state
FEMA_state <- st_read("/capstone/casaschools/flooding/NFHL_06_20240401/NFHL_06_20240401.gdb",
                      layer = "S_FLD_HAZ_AR",
                      quiet = TRUE)

# read in california schools data
schools_buffers <- st_read("/capstone/casaschools/schools_data/schools_buffer/",
                        quiet = TRUE)
```

We will map FEMA flood hazard on top of school buffer areas, showing high and moderate to low flood hazard areas. We will select and consolidate areas based on FEMA flood hazard categories. From the FEMA flooding documentation, a number of different categories of flood zone fall into the broader categories of high and moderate to low. These smaller classifications present in our subset of the national data (which covers California) are:

High Risk:
A, AE, A99, AH, A0, VE, V

Moderate to Low:
X

Areas to be removed:
AREA NOT INCLUDED, D (possible but undetermined), OPEN WATER

We decided to group Moderate and Low together because the FEMA documentation lists category X in both. For legibility, we wanted to include only relevant data, so we removed polygons that don't refer to any risk category. Zone D refers to areas where no flood risk analysis has been conducted.

```{r}
# explore FEMA data, find unique categories of flood zones in our data
unique(FEMA_state$FLD_ZONE)

# group smaller categories together and assign "High" or "Moderate to Low" risk to them
FEMA_reclass <- FEMA_state %>%
  mutate(flood_risk = ifelse(str_detect(FLD_ZONE, "A") | str_detect(FLD_ZONE, "V"), "high",
                       ifelse(str_detect(FLD_ZONE, "X"),"moderate to low",
                              "undetermined")))

## test that it worked
# the number of rows containing "A" and "V" for flood zone should equal the number of high risk polygons
nrow(filter(FEMA_state, str_detect(FLD_ZONE, "A") | str_detect(FLD_ZONE, "V"))) == nrow(filter(FEMA_reclass, flood_risk == "high"))

#see how many rows there are in high risk areas
nrow(filter(FEMA_reclass, flood_risk == "high"))

# the number of rows containing "X" for flood zone should equal the number of moderate to low risk polygons
nrow(filter(FEMA_state, str_detect(FLD_ZONE, "X"))) == nrow(filter(FEMA_reclass, flood_risk == "moderate to low"))

#see how many rows there are in moderate to low risk areas
nrow(filter(FEMA_reclass, flood_risk == "moderate to low"))

# see how many are undetermined
nrow(filter(FEMA_reclass, flood_risk == "undetermined"))

# take a look at total number of rows in FEMA_reclass
dim(FEMA_reclass)

#
```

We can see through our tests that our reclassifications worked. Now, we need to drop rows where flood risk is "undetermined", representing areas with irrelevant information.

```{r}
# drop polygons that are undetermined
# FEMA_reclass <- FEMA_reclass %>% 
#   filter(flood_risk != "undetermined")

#nrow(FEMA_reclass)
```

It's tmap time! 

```{r}
# make sure the crs are the same
FEMA_reclass <- st_transform(FEMA_reclass, st_crs(schools_buffers))

# pick a school
alameda_high <- schools_buffers %>% 
  filter(SchoolName == "Alameda High")

# grab the flooding polgons that intersect with that school area
alameda_flood <- FEMA_reclass[alameda_high, ]

#intersect flooding polygons so only the extent within school area is shown
alameda_high_intersected <- st_intersection(alameda_high, alameda_flood)

# plot it
tmap_mode("view")

tm_shape(alameda_high_intersected) +
  tm_polygons(fill = "flood_risk",
              border.col = NA) +
  tm_shape(alameda_flood) + 
  tm_polygons(fill = "flood_risk", alpha = .2, legend.show=FALSE) 


```

# try this with a high risk flood school in sacremento, "Folsom Lake High"

```{r}
# pick a school
folsom_lake_high <- schools_buffers %>% 
  filter(SchoolName == "Folsom Lake High")

# grab the flooding polgons that intersect with that school area
folsom_lake_high_flood <- FEMA_reclass[folsom_lake_high, ]

#intersect flooding polygons so only the extent within school area is shown
folsom_lake_high_intersected <- st_intersection(folsom_lake_high, folsom_lake_high_flood)

# plot it
tmap_mode("view")

tm_shape(folsom_lake_high_intersected) +
  tm_polygons(fill = "flood_risk",
              title = "Flood Risk",
              labels = c("High", "Moderate to Low", "Undetermined"),
              palette = rev(brewer.pal(n = 4, name = "Blues")), style = "pretty",
              alpha = .5) +
  tm_shape(folsom_lake_high_flood, alpha = .2) + 
  tm_polygons(fill = "flood_risk", alpha = .2, legend.show=FALSE, 
              palette = rev(brewer.pal(n = 4, name = "Blues")), style = "pretty")
  
```

```{r}
tmap_mode("view")

# Define a new contrasting blue color palette
new_palette <- scale_color_manual(values=c("#0C46EE","#6AAEEA","#AEDBEA","#f0f0f0"))

# Plot the map with the updated color palette
tm_shape(folsom_lake_high_intersected) +
  tm_polygons(fill = "flood_risk",
              title = "Flood Risk",
              labels = c("High", "Moderate to Low", "Undetermined"),
              palette = c("#0C46EE", "#6AAEEA", "#AEDBEA", "#f0f0f0"), style = "pretty",
              alpha = 0.3) +
  tm_shape(folsom_lake_high_flood, alpha = 0.2) + 
  tm_polygons(fill = "flood_risk", alpha = 0.2, legend.show = FALSE, 
              palette = c("#0C46EE", "#6AAEEA", "#AEDBEA", "#f0f0f0"), style = "pretty")
```

Here is the final plot that will be used for the "servers_hazards_plotting" flooding file in the Shiny app. We will use Dos Pueblos Senior High School for initial plotting. 

```{r}
# pick a school
dp_sr_high <- schools_buffers %>% 
  filter(CDSCode == 42767864231726)

# grab the flooding polgons that intersect with that school area
dp_sr_high_flood <- FEMA_reclass[dp_sr_high, ]

#intersect flooding polygons so only the extent within school area is shown
dp_sr_high_intersected <- st_intersection(dp_sr_high, dp_sr_high_flood)

# plot it
tmap_mode("view")

flood <- tm_shape(dp_sr_high_intersected) +
  tm_polygons(fill = "flood_risk",
              title = "Flood Risk",
              labels = c("High", "Moderate to Low", "Undetermined"),
             palette = c("#0C46EE", "#AEDBEA", "#8DB6CD"), style = "pretty",
              alpha = 0.5) +
  tm_shape(dp_sr_high_flood, alpha = 0.5) + 
  tm_polygons(fill = "flood_risk", alpha = 0.5, legend.show=FALSE, 
              palette = c("#0C46EE", "#AEDBEA", "#8DB6CD"), style = "pretty")

flood
  
```


Convert to leaflet map:

```{r}

dp_sr_high_intersected <- st_transform(dp_sr_high_intersected, crs = 4326)

# Extract geometry centroids
centroids <- st_centroid(dp_sr_high_intersected)
lng <- st_coordinates(centroids)[, "X"]
lat <- st_coordinates(centroids)[, "Y"]

# define color palette and labels for FEMA flood zone classification
labels <- c("High", "Moderate to Low", "Undetermined")
flood_colors <- c("#0C46EE", "#AEDBEA", "#8DB6CD")
flood_palette <- colorFactor(palette = flood_colors,
                           domain = dp_sr_high_intersected$flood_risk)

# pick a school
dp_sr_high <- schools_buffers %>% 
  filter(CDSCode == 42767864231726) %>% 
  st_transform(crs = 4326)

# create the school point as the centroid of the buffer
dp_point <- dp_sr_high %>% 
  st_centroid() %>% 
  st_transform(crs = 4326)

# grab the flooding polygons that intersect with that school area
dp_sr_high_flood <- FEMA_reclass[dp_sr_high, ]

#intersect flooding polygons so only the extent within school area is shown
dp_sr_high_intersected <- st_intersection(dp_sr_high, dp_sr_high_flood)

# leaflet map of flood risk potential
leaflet() %>% 
  
  # add basemap
  addProviderTiles(providers$Esri.WorldTopoMap) %>% 
  
  # add cropped flood risk
  addPolygons(data = dp_sr_high_intersected, fillColor = flood_palette, opacity = .7, group = "Flood Risk") %>% 
  
  # add school buffer polygon
  addPolygons(data = dp_sr_high, color = "black", fill = FALSE, 
              weight = 2, group = "School Community Area") %>% 
  # add school point
  addCircleMarkers(data = dp_point, color = "blue", stroke = FALSE, 
                   weight = 3, radius = 5, fillOpacity = 1,
                   group = "School Point") %>% 
  
  # add legend for flood risk with custom labels
  addLegend("bottomright", colors = flood_colors, labels = labels,
            title = "Flood Risk", opacity = 0.5)
```


